#!/bin/sh 
#
#  This is automatically generated file. DO NOT MODIFY !
#
#  Firewall Builder  fwb_ipt v5.1.0.3599
#
#  Generated Sun Jun 14 18:56:41 2015 CEST by christof
#
# files: * oc.ffm.freifunk.net.fw /etc/fw/oc.ffm.freifunk.net.fw
#
# Compiled for iptables (any version)
#

# oc.ffm.freifunk.net:Policy:2: warning: Making rule stateless because it matches ICMPv6
# oc.ffm.freifunk.net:Policy:2: warning: Making rule stateless because it matches ICMPv6
# oc.ffm.freifunk.net:Policy:2: warning: Making rule stateless because it matches ICMPv6

set -x
FWBDEBUG=""

PATH="/sbin:/usr/sbin:/bin:/usr/bin:${PATH}"
export PATH



LSMOD="/sbin/lsmod"
MODPROBE="/sbin/modprobe"
IPTABLES="/sbin/iptables"
IP6TABLES="/sbin/ip6tables"
IPTABLES_RESTORE="/sbin/iptables-restore"
IP6TABLES_RESTORE="/sbin/ip6tables-restore"
IP="/sbin/ip"
IFCONFIG="/sbin/ifconfig"
VCONFIG="/sbin/vconfig"
BRCTL="/sbin/brctl"
IFENSLAVE="/sbin/ifenslave"
IPSET="/usr/sbin/ipset"
LOGGER="/usr/bin/logger"

log() {
    echo "$1"
    which "$LOGGER" >/dev/null 2>&1 && $LOGGER -p info "$1"
}

getInterfaceVarName() {
    echo $1 | sed 's/\./_/'
}

getaddr_internal() {
    dev=$1
    name=$2
    af=$3
    L=$($IP $af addr show dev $dev |  sed -n '/inet/{s!.*inet6* !!;s!/.*!!p}' | sed 's/peer.*//')
    test -z "$L" && { 
        eval "$name=''"
        return
    }
    eval "${name}_list=\"$L\"" 
}

getnet_internal() {
    dev=$1
    name=$2
    af=$3
    L=$($IP route list proto kernel | grep $dev | grep -v default |  sed 's! .*$!!')
    test -z "$L" && { 
        eval "$name=''"
        return
    }
    eval "${name}_list=\"$L\"" 
}


getaddr() {
    getaddr_internal $1 $2 "-4"
}

getaddr6() {
    getaddr_internal $1 $2 "-6"
}

getnet() {
    getnet_internal $1 $2 "-4"
}

getnet6() {
    getnet_internal $1 $2 "-6"
}

# function getinterfaces is used to process wildcard interfaces
getinterfaces() {
    NAME=$1
    $IP link show | grep ": $NAME" | while read L; do
        OIFS=$IFS
        IFS=" :"
        set $L
        IFS=$OIFS
        echo $2
    done
}

diff_intf() {
    func=$1
    list1=$2
    list2=$3
    cmd=$4
    for intf in $list1
    do
        echo $list2 | grep -q $intf || {
        # $vlan is absent in list 2
            $func $intf $cmd
        }
    done
}

find_program() {
  PGM=$1
  which $PGM >/dev/null 2>&1 || {
    echo "\"$PGM\" not found"
    exit 1
  }
}
check_tools() {
  find_program which
  find_program $IPTABLES 
  find_program $IP 
}
reset_iptables_v4() {
  $IPTABLES -P OUTPUT  DROP
  $IPTABLES -P INPUT   DROP
  $IPTABLES -P FORWARD DROP

cat /proc/net/ip_tables_names | while read table; do
  $IPTABLES -t $table -L -n | while read c chain rest; do
      if test "X$c" = "XChain" ; then
        $IPTABLES -t $table -F $chain
      fi
  done
  $IPTABLES -t $table -X
done
}

reset_iptables_v6() {
  $IP6TABLES -P OUTPUT  DROP
  $IP6TABLES -P INPUT   DROP
  $IP6TABLES -P FORWARD DROP

cat /proc/net/ip6_tables_names | while read table; do
  $IP6TABLES -t $table -L -n | while read c chain rest; do
      if test "X$c" = "XChain" ; then
        $IP6TABLES -t $table -F $chain
      fi
  done
  $IP6TABLES -t $table -X
done
}


P2P_INTERFACE_WARNING=""

missing_address() {
    address=$1
    cmd=$2

    oldIFS=$IFS
    IFS="@"
    set $address
    addr=$1
    interface=$2
    IFS=$oldIFS



    $IP addr show dev $interface | grep -q POINTOPOINT && {
        test -z "$P2P_INTERFACE_WARNING" && echo "Warning: Can not update address of interface $interface. fwbuilder can not manage addresses of point-to-point interfaces yet"
        P2P_INTERFACE_WARNING="yes"
        return
    }

    test "$cmd" = "add" && {
      echo "# Adding ip address: $interface $addr"
      echo $addr | grep -q ':' && {
          $FWBDEBUG $IP addr $cmd $addr dev $interface
      } || {
          $FWBDEBUG $IP addr $cmd $addr broadcast + dev $interface
      }
    }

    test "$cmd" = "del" && {
      echo "# Removing ip address: $interface $addr"
      $FWBDEBUG $IP addr $cmd $addr dev $interface || exit 1
    }

    $FWBDEBUG $IP link set $interface up
}

list_addresses_by_scope() {
    interface=$1
    scope=$2
    ignore_list=$3
    $IP addr ls dev $interface | \
      awk -v IGNORED="$ignore_list" -v SCOPE="$scope" \
        'BEGIN {
           split(IGNORED,ignored_arr);
           for (a in ignored_arr) {ignored_dict[ignored_arr[a]]=1;}
         }
         (/inet |inet6 / && $0 ~ SCOPE && !($2 in ignored_dict)) {print $2;}' | \
        while read addr; do
          echo "${addr}@$interface"
	done | sort
}


update_addresses_of_interface() {
    ignore_list=$2
    set $1 
    interface=$1 
    shift

    FWB_ADDRS=$(
      for addr in $*; do
        echo "${addr}@$interface"
      done | sort
    )

    CURRENT_ADDRS_ALL_SCOPES=""
    CURRENT_ADDRS_GLOBAL_SCOPE=""

    $IP link show dev $interface >/dev/null 2>&1 && {
      CURRENT_ADDRS_ALL_SCOPES=$(list_addresses_by_scope $interface 'scope .*' "$ignore_list")
      CURRENT_ADDRS_GLOBAL_SCOPE=$(list_addresses_by_scope $interface 'scope global' "$ignore_list")
    } || {
      echo "# Interface $interface does not exist"
      # Stop the script if we are not in test mode
      test -z "$FWBDEBUG" && exit 1
    }

    diff_intf missing_address "$FWB_ADDRS" "$CURRENT_ADDRS_ALL_SCOPES" add
    diff_intf missing_address "$CURRENT_ADDRS_GLOBAL_SCOPE" "$FWB_ADDRS" del
}

clear_addresses_except_known_interfaces() {
    $IP link show | sed 's/://g' | awk -v IGNORED="$*" \
        'BEGIN {
           split(IGNORED,ignored_arr);
           for (a in ignored_arr) {ignored_dict[ignored_arr[a]]=1;}
         }
         (/state/ && !($2 in ignored_dict)) {print $2;}' | \
         while read intf; do
            echo "# Removing addresses not configured in fwbuilder from interface $intf"
            $FWBDEBUG $IP addr flush dev $intf scope global
            $FWBDEBUG $IP link set $intf down
         done
}

check_file() {
    test -r "$2" || {
        echo "Can not find file $2 referenced by address table object $1"
        exit 1
    }
}

check_run_time_address_table_files() {
    :
    
}

load_modules() {
    :
    
}

verify_interfaces() {
    :
    
}

prolog_commands() {
    echo "Running prolog script"
    
}

epilog_commands() {
    echo "Running epilog script"
    /etc/init.d/fail2ban restart
}

run_epilog_and_exit() {
    epilog_commands
    exit $1
}

configure_interfaces() {
    :
    # Configure interfaces
    # See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=429689
    # this ensures that secondary ip address is "promoted" to primary
    # when primary address is deleted, instead of deleting both
    # primary and secondary addresses. It looks like this is only
    # available starting from Linux 2.6.16 
    test -f /proc/sys/net/ipv4/conf/all/promote_secondaries && \
        echo 1 >  /proc/sys/net/ipv4/conf/all/promote_secondaries
    update_addresses_of_interface "eth0 192.168.100.120/24" ""
    update_addresses_of_interface "backbone-oc 2001:1a50:11:4:3072:9ff:fe19:d542/64 fddd:5d16:b5dd:0:3072:9ff:fe19:d542/64 10.126.255.16/16" ""
    update_addresses_of_interface "lo ::1/128 127.0.0.1/8" ""
}

script_body() {
    # ================ IPv4


    # ================ Table 'filter', automatic rules
    # accept established sessions
    $IPTABLES -A INPUT   -m state --state ESTABLISHED,RELATED -j ACCEPT 
    $IPTABLES -A OUTPUT  -m state --state ESTABLISHED,RELATED -j ACCEPT 
    $IPTABLES -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT






    # ================ Table 'filter', rule set Policy
    # 
    # Rule 0 (lo)
    # 
    echo "Rule 0 (lo)"
    # 
    $IPTABLES -A INPUT -i lo   -m state --state NEW  -j ACCEPT
    $IPTABLES -A OUTPUT -o lo   -m state --state NEW  -j ACCEPT
    # 
    # Rule 1 (global)
    # 
    echo "Rule 1 (global)"
    # 
    $IPTABLES -A INPUT -p tcp -m tcp  --dport 22  -m state --state NEW  -j ACCEPT
    $IPTABLES -A FORWARD -i +  -p tcp -m tcp  --dport 22  -m state --state NEW  -j ACCEPT
    # 
    # Rule 2 (global)
    # 
    echo "Rule 2 (global)"
    # 
    $IPTABLES -A OUTPUT -p icmp  -m icmp  --icmp-type any  -m state --state NEW  -j ACCEPT
    $IPTABLES -A INPUT -p icmp  -m icmp  --icmp-type any  -m state --state NEW  -j ACCEPT
    $IPTABLES -A FORWARD -p icmp  -m icmp  --icmp-type any  -m state --state NEW  -j ACCEPT
    # 
    # Rule 3 (eth0,backbone-oc)
    # 
    echo "Rule 3 (eth0,backbone-oc)"
    # 
    $IPTABLES -A INPUT -i backbone-oc  -p tcp -m tcp  -m multiport  -d 10.126.255.16   --dports 10001,80,443,8082,12001,8000  -m state --state NEW  -j ACCEPT
    $IPTABLES -A INPUT -i eth0  -p tcp -m tcp  -m multiport  -d 10.126.255.16   --dports 10001,80,443,8082,12001,8000  -m state --state NEW  -j ACCEPT
    $IPTABLES -A INPUT -i backbone-oc  -p tcp -m tcp  -m multiport  -d 192.168.100.120   --dports 10001,80,443,8082,12001,8000  -m state --state NEW  -j ACCEPT
    $IPTABLES -A INPUT -i eth0  -p tcp -m tcp  -m multiport  -d 192.168.100.120   --dports 10001,80,443,8082,12001,8000  -m state --state NEW  -j ACCEPT
    # 
    # Rule 4 (eth0)
    # 
    echo "Rule 4 (eth0)"
    # 
    $IPTABLES -A OUTPUT -o eth0   -m state --state NEW  -j ACCEPT
    # 
    # Rule 5 (backbone-oc)
    # 
    echo "Rule 5 (backbone-oc)"
    # 
    $IPTABLES -A OUTPUT -o backbone-oc   -m state --state NEW  -j ACCEPT
    # 
    # Rule 6 (global)
    # 
    echo "Rule 6 (global)"
    # 
    $IPTABLES -N Out_RULE_6
    $IPTABLES -A OUTPUT  -j Out_RULE_6
    $IPTABLES -A FORWARD -o +   -j Out_RULE_6
    $IPTABLES -A Out_RULE_6  -j LOG  --log-level info --log-prefix "oc.ffm RULE 6 -- DENY "
    $IPTABLES -A Out_RULE_6  -j DROP


    # ================ IPv6


    # ================ Table 'filter', automatic rules
    # accept established sessions
    $IP6TABLES -A INPUT   -m state --state ESTABLISHED,RELATED -j ACCEPT 
    $IP6TABLES -A OUTPUT  -m state --state ESTABLISHED,RELATED -j ACCEPT 
    $IP6TABLES -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT






    # ================ Table 'filter', rule set Policy
    # 
    # Rule 0 (lo)
    # 
    echo "Rule 0 (lo)"
    # 
    $IP6TABLES -A INPUT -i lo   -m state --state NEW  -j ACCEPT
    $IP6TABLES -A OUTPUT -o lo   -m state --state NEW  -j ACCEPT
    # 
    # Rule 1 (global)
    # 
    echo "Rule 1 (global)"
    # 
    $IP6TABLES -A INPUT -p tcp -m tcp  --dport 22  -m state --state NEW  -j ACCEPT
    $IP6TABLES -A FORWARD -i +  -p tcp -m tcp  --dport 22  -m state --state NEW  -j ACCEPT
    # 
    # Rule 2 (global)
    # 
    echo "Rule 2 (global)"
    # 
    # oc.ffm.freifunk.net:Policy:2: warning: Making rule stateless because it matches ICMPv6

    $IP6TABLES -A OUTPUT -p ipv6-icmp  -j ACCEPT
    $IP6TABLES -A INPUT -p ipv6-icmp  -j ACCEPT
    $IP6TABLES -A FORWARD -p ipv6-icmp  -j ACCEPT
    # 
    # Rule 3 (eth0,backbone-oc)
    # 
    echo "Rule 3 (eth0,backbone-oc)"
    # 
    $IP6TABLES -N Cid31166X619.0
    $IP6TABLES -A INPUT -i backbone-oc  -p tcp -m tcp  -m multiport  --dports 10001,80,443,8082,12001,8000  -m state --state NEW  -j Cid31166X619.0
    $IP6TABLES -A Cid31166X619.0  -d 2001:1a50:11:4:3072:9ff:fe19:d542   -j ACCEPT
    $IP6TABLES -A Cid31166X619.0  -d fddd:5d16:b5dd:0:3072:9ff:fe19:d542   -j ACCEPT
    # 
    # Rule 5 (backbone-oc)
    # 
    echo "Rule 5 (backbone-oc)"
    # 
    $IP6TABLES -A OUTPUT -o backbone-oc   -m state --state NEW  -j ACCEPT
    # 
    # Rule 6 (global)
    # 
    echo "Rule 6 (global)"
    # 
    $IP6TABLES -N Out_RULE_6
    $IP6TABLES -A OUTPUT  -j Out_RULE_6
    $IP6TABLES -A FORWARD -o +   -j Out_RULE_6
    $IP6TABLES -A Out_RULE_6  -j LOG  --log-level info --log-prefix "oc.ffm RULE 6 -- DENY "
    $IP6TABLES -A Out_RULE_6  -j DROP

    # ============== ROUTING RULES ============== 

    HAVE_MKTEMP=$(which mktemp)

    test -n "$HAVE_MKTEMP" && {
      TMPDIRNAME=$(mktemp -d)
      test -z "$TMPDIRNAME" && exit 1
    }

    test -z "$HAVE_MKTEMP" && {
      TMPDIRNAME="/tmp/.fwbuilder.tempdir.$$"
      (umask 077 && mkdir $TMPDIRNAME) || exit 1
    }

    TMPFILENAME="$TMPDIRNAME/.fwbuilder.out"
    OLD_ROUTES="$TMPDIRNAME/.old_routes"

    #
    # This function stops stdout redirection
    # and sends previously saved output to terminal
    restore_script_output()
    {
      exec 1>&3 2>&1
      cat $TMPFILENAME
      rm -rf $TMPDIRNAME
    }

    # if any routing rule fails we do our best to prevent freezing the firewall
    route_command_error()
    {
      echo "Error: Routing rule $1 couldn't be activated"
      echo "Recovering previous routing configuration..."
      # delete current routing rules
      $IP route show | while read route ; do $IP route del $route ; done
      # restore old routing rules
      sh $OLD_ROUTES
      echo "...done"
      restore_script_output
      epilog_commands
      exit 1
    }

    # redirect output to prevent ssh session from stalling
    exec 3>&1
    exec 1> $TMPFILENAME
    exec 2>&1

    # store previous routing configuration (sort: 'via' GW has to be
    # inserted after device routes)

    $IP route show | sort -k 2 | awk '{printf "ip route add %s\n",$0;}' > $OLD_ROUTES

    echo "Deleting routing rules previously set by user space processes..."
    $IP route show | grep -v '\( proto kernel \)\|\(default via \)' | \
        while read route ; do $IP route del $route ; done
        
    echo "Activating non-ecmp routing rules..."
    # 
    # Rule 0 (main)
    # 
    echo "Routing rule 0 (main)"
    # 
    # 
    # 
    $IP route add 10.0.0.0/8 via 10.126.255.11 \
    || route_command_error "0 (main)"


    restore_script_output
    echo "...done."
}

ip_forward() {
    :
    echo 1 > /proc/sys/net/ipv4/ip_forward
}

reset_all() {
    :
    reset_iptables_v4
  reset_iptables_v6
}

block_action() {
    reset_all
}

stop_action() {
    reset_all
    $IPTABLES -P OUTPUT  ACCEPT
    $IPTABLES -P INPUT   ACCEPT
    $IPTABLES -P FORWARD ACCEPT
    $IP6TABLES -P OUTPUT  ACCEPT
    $IP6TABLES -P INPUT   ACCEPT
    $IP6TABLES -P FORWARD ACCEPT
}

check_iptables() {
    IP_TABLES="$1"
    [ ! -e $IP_TABLES ] && return 151
    NF_TABLES=$(cat $IP_TABLES 2>/dev/null)
    [ -z "$NF_TABLES" ] && return 152
    return 0
}
status_action() {
    check_iptables "/proc/net/ip_tables_names"
    ret_ipv4=$?
    check_iptables "/proc/net/ip6_tables_names"
    ret_ipv6=$?
    [ $ret_ipv4 -eq 0 -o $ret_ipv6 -eq 0 ] && return 0
    [ $ret_ipv4 -eq 151 -o $ret_ipv6 -eq 151 ] && {
        echo "iptables modules are not loaded"
    }
    [ $ret_ipv4 -eq 152 -o $ret_ipv6 -eq 152 ] && {
        echo "Firewall is not configured"
    }
    exit 3
}

# See how we were called.
# For backwards compatibility missing argument is equivalent to 'start'

cmd=$1
test -z "$cmd" && {
    cmd="start"
}

case "$cmd" in
    start)
        log "Activating firewall script generated Sun Jun 14 18:56:41 2015 by christof"
        check_tools
         prolog_commands 
        check_run_time_address_table_files
        
        load_modules " ipv6"
        configure_interfaces
        verify_interfaces
        
         reset_all 
        
        script_body
        ip_forward
        epilog_commands
        RETVAL=$?
        ;;

    stop)
        stop_action
        RETVAL=$?
        ;;

    status)
        status_action
        RETVAL=$?
        ;;

    block)
        block_action
        RETVAL=$?
        ;;

    reload)
        $0 stop
        $0 start
        RETVAL=$?
        ;;

    interfaces)
        configure_interfaces
        RETVAL=$?
        ;;

    test_interfaces)
        FWBDEBUG="echo"
        configure_interfaces
        RETVAL=$?
        ;;



    *)
        echo "Usage $0 [start|stop|status|block|reload|interfaces|test_interfaces]"
        ;;

esac

exit $RETVAL